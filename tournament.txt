--------------------------------------------------------------------------------
Section 0 - Line up
--------------------------------------------------------------------------------
Player 0 (P0): Bscts&Grvy, America The Beautiful
        A melting pot of diverse code. Uses the best parts of all our test strat
        egies and experimentation.
Player 1 (P1): HackerBois, Cutting The Gordian Knot
        The decision whether to collude or betray is based off whether our score
         is greater than, equal to, or less than our oppents score
Player 2 (P2): kollude, morse_code
        We found out that with any of the potential strategies we thought up we 
        would either win or lose by one round or tie. This seemed really dishear
        tening to us so we decided to just have fun with it and wrote a message 
        in morse code with each b representing a dot and cs representing dashes
Player 3 (P3): G-5, Betray, then betray or collude
        Betray first round. If all scores combined is higher than zero betray, i
        f lowwer collude.
Player 4 (P4): HONG KONG, STRAG1
        first six betray and the next based on opponents most common decision in
         last 5 moves
Player 5 (P5): GitHub2.0, Strategy 1
        this strategy is a strategy which bases a decision off of the last 15 ro
        unds with the opponent and percents
Player 6 (P6): CoolKids, CopyCat
        The program starts off betraying and depending on the opponents response
         it copies their latest response and it uses it as its next response
--------------------------------------------------------------------------------
Section 1 - Player vs. Player
--------------------------------------------------------------------------------
Each column shows pts/round earned against each other player:
             P0     P1     P2     P3     P4     P5     P6
vs. P0 :      0   -248   -341   -496   -249   -285   -250
vs. P1 :   -252      0   -347   -499   -250   -291   -250
vs. P2 :   -122   -115      0   -312   -110   -123   -250
vs. P3 :     95     97     60      0     97     96     48
vs. P4 :   -252   -250   -350   -499      0   -309   -250
vs. P5 :   -200   -194   -342   -497   -169      0   -250
vs. P6 :   -250   -250   -250   -250   -250   -250      0
TOTAL  :   -981   -960  -1570  -2553   -931  -1162  -1202
--------------------------------------------------------------------------------
Section 2 - Leaderboard
--------------------------------------------------------------------------------
Average points per round:
Team name (P#):  Score      with strategy name
HONG KONG (P4):       -133 points with STRAG1                                  
HackerBois(P1):       -138 points with Cutting The Gordian Knot                
Bscts&Grvy(P0):       -141 points with America The Beautiful                   
GitHub2.0 (P5):       -166 points with Strategy 1                              
CoolKids  (P6):       -172 points with CopyCat                                 
kollude   (P2):       -225 points with morse_code                              
G-5       (P3):       -365 points with Betray, then betray or collude          
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
team1--------------------------------------------------------------------------------
####
# Note: All comments ending in "-TP" were written by TrevorPeitzman
####

team_name = 'Bscts&Grvy' # Only 10 chars displayed.
strategy_name = 'America The Beautiful'
strategy_description = 'A melting pot of diverse code. ' \
                       'Uses the best parts of all our test strategies and experimentation.'
    
def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''

    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.

    # Create variable to represent the probability this is the last round to be played  -TP
    # knowing there is a random # of rounds played between 100 & 200    -TP
    probability_round_is_last = float((len(my_history)) - 100) / 99.0

    # If opponent betrays in first 8 moves even though I didn't, retaliate for rest of match    -TP
    if 'b' in their_history[0:7]:
        return 'b'
    # As end of match approaches, change tactic slightly    -TP
    # Return 'b' when on the guaranteed last round      -TP
    elif probability_round_is_last == 1:
        return 'b'
    # Avoid issue with having no history; always return 'c' on first round  -TP
    elif len(their_history) == 0:
        return 'c'
    # First Round: no response is given, so their_history == 0 characters. Program colludes as initial response. --Brandon Rios
    elif their_history[-1] == 'b':
        return 'b'
    ##Subsequent Rounds: If opponent answered with 'betray' the previous round, respond with betray. --Brandon Rios
    else:
        return 'c'
    ###Subsequent Rounds (cont'd): If opponent responded with other (a.k.a. Collude) in previous round, respond with collude. --Brandon Rios


def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='c'):
         print 'Test passed'
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='c')--------------------------------------------------------------------------------
team2--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'HackerBois' # Only 10 chars displayed.
strategy_name = 'Cutting The Gordian Knot'
strategy_description = 'The decision whether to collude or betray is based off whether our score is greater than, equal to, or less than our oppents score'
    
def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''

    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    
    if my_score >= their_score: #if our score is ever greater or equal to our opponent's score, then we betray.  If not, we collude. 
        return 'b'

    else:
        return 'c'

    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print 'Test passed'
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')             
--------------------------------------------------------------------------------
team4--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'kollude'
strategy_name = 'morse_code'
strategy_description = 'We found out that with any of the potential strategies we thought up we would either win or lose by one round or tie. This seemed really disheartening to us so we decided to just have fun with it and wrote a message in morse code with each b representing a dot and cs representing dashes'
    
def move(my_history, their_history, my_score, their_score):
    answer = "cbbbbbbbbbbbbcbcbbccbccbcbccbbbbbbbbcbbbcbbcbcbcbbbbbcbbcbbcccccccbcccbbbcbcbbbbbbcbccbbccbcbbcbbcbbbcbbccbccbcccccbccbbbbcbcbbbbbbbbbbbbcbcbbccbccbcbccbbbbbbbbcbbbcbbcbcbcbbbbbcbbcbbcccccccbcccbbbcbcbbbbbbcbccbbccbcbbcbbcbbbcbbccbccbcccccbccbbbbcb"
    return answer[len(my_history) - 1]

    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print 'Test passed'
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')             
--------------------------------------------------------------------------------
team5--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'G-5' # Only 10 chars displayed.
strategy_name = 'Betray, then betray or collude'
strategy_description = 'Betray first round. If all scores combined is higher than zero betray, if lowwer collude.'
    
def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''

    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    
    all_score = my_score + their_score
    if my_score == 0:
        return 'b'
    if all_score > 0:
        return 'b'
    else:
        return 'c'
    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print 'Test passed'
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')             --------------------------------------------------------------------------------
team6--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'HONG KONG' # Only 10 chars displayed.
strategy_name = 'STRAG1'
strategy_description = 'first six betray and the next based on opponents most common decision in last 5 moves'



    
def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''

    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    
    def must_common(common=''):
        '''collude or betray appear most often in oppenents last 5 movies'''
        
        y = 0
        x = 0
        #go through each letter in the last 5 decisions of opponent
        for letters in their_history[-5:]:
            #the x or y with the highest value is equivalent of the most often letter
            if(letters == 'b'or 'B'):
                #for every b add one to y
                y =+ 1
            else:
                x =+ 1
        #assign the value of common to the most appeared letter
        if (y > x):
            common='b' 
        else:
            common='c' 
    if len(my_history) < 6: # It's the first six round; collude.
        return 'b'
    else:
        #returns opposite letter of the most common letter in last 5 decisions
        if must_common(common='b'):
             return 'c'
        else:
    
             return 'b'

def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print 'Test passed'
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')  --------------------------------------------------------------------------------
team7--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'GitHub2.0' # Only 10 chars displayed.
strategy_name = 'Strategy 1'
strategy_description = 'this strategy is a strategy which bases a decision off of the last 15 rounds with the opponent and percents'
import random
def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''

    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.

    if 'c' in their_history[-15:]: # If the other player has colluded within last 15 rounds, 
        return 'b'               # Betray now
    else:
        if random.random()<0.2: # 20% of the other rounds
            return 'c'         # collude
        else:
            return 'b'         # but 80% of the time: betrey
            
    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print 'Test passed'
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0,
              their_score=0,
              result='b')--------------------------------------------------------------------------------
team12--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'CoolKids' # Only 10 chars displayed.
strategy_name = 'CopyCat'
strategy_description = 'The program starts off betraying and depending on the opponents response it copies their latest response and it uses it as its next response'                      
    
def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''
    if len(my_history) == 0:
        return 'b'
    elif my_history[-1]=='b' and their_history[-1]=='b':
        return 'b'
    elif my_history[-1]=='b' and their_history[-1]=='c':
        return 'c'
    elif their_score > my_score or their_score < my_score:
        return 'b'

    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.

    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print 'Test passed'
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')             --------------------------------------------------------------------------------
Section 3 - Game Data for Team Bscts&Grvy
--------------------------------------------------------------------------------
-252 pt/round: Bscts&Grvy(P0) "America The Beautiful"
-248 pt/round: HackerBois(P1) "Cutting The Gordian Knot"
cbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
Bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
-122 pt/round: Bscts&Grvy(P0) "America The Beautiful"
-341 pt/round: kollude(P2) "morse_code"
cBbbbbbbbbbbbbBbBbbBBbBBbBbBBbbbbbbbbBbbbBbbBbBbBbbbbbBbbBbbBBBBBBBbBBBbbbBbBbbb
Bcbbbbbbbbbbbbcbcbbccbccbcbccbbbbbbbbcbbbcbbcbcbcbbbbbcbbcbbcccccccbcccbbbcbcbbb

bbbBbBBbbBBbBbbBbbBbbbBbbBBbBBbBBBBBbBBbbbbBbBbbbbbbbbbbbbBb
bbbcbccbbccbcbbcbbcbbbcbbccbccbcccccbccbbbbcbcbbbbbbbbbbbbcb

--------------------------------------------------------------------------------
95 pt/round: Bscts&Grvy(P0) "America The Beautiful"
-496 pt/round: G-5(P3) "Betray, then betray or collude"
cBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
Bccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

--------------------------------------------------------------------------------
-252 pt/round: Bscts&Grvy(P0) "America The Beautiful"
-249 pt/round: HONG KONG(P4) "STRAG1"
cbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
Bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
-200 pt/round: Bscts&Grvy(P0) "America The Beautiful"
-285 pt/round: GitHub2.0(P5) "Strategy 1"
cbbbbbbbbbbbbbbbbbBbbbbbbBBBbbbBBbBbbbbbbbbbbbBbbbBbBbBbbbbBbbBbbbbbbbbbBbbbbbbb
Bbbbbbbbbbbbbbbbbbcbbbbbbcccbbbccbcbbbbbbbbbbbcbbbcbcbcbbbbcbbcbbbbbbbbbcbbbbbbb

bbbbbbbbbbBbbbbBBbbbbbbbbbbbbbbb
bbbbbbbbbbcbbbbccbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
-250 pt/round: Bscts&Grvy(P0) "America The Beautiful"
-250 pt/round: CoolKids(P6) "CopyCat"
cBbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
Bc                                                                              

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
                                                                                

bbbbbbbbbbbbbbbbb
                 

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team HackerBois
--------------------------------------------------------------------------------
-248 pt/round: HackerBois(P1) "Cutting The Gordian Knot"
-252 pt/round: Bscts&Grvy(P0) "America The Beautiful"
Bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
cbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
-115 pt/round: HackerBois(P1) "Cutting The Gordian Knot"
-347 pt/round: kollude(P2) "morse_code"
bBbbbbbbbbbbbbBbBbbBBbBBbBbBBbbbbbbbbBbbbBbbBbBbBbbbbbBbbBbbBBBBBBBbBBBbbbBbBbbb
bcbbbbbbbbbbbbcbcbbccbccbcbccbbbbbbbbcbbbcbbcbcbcbbbbbcbbcbbcccccccbcccbbbcbcbbb

bbbBbBBbbBBbBbbBbbBbbbBbbBBbBBbBBBBBbBBbbbbBbBbbbbbbbbbbbbBbBbbBBbBBbBbBBbb
bbbcbccbbccbcbbcbbcbbbcbbccbccbcccccbccbbbbcbcbbbbbbbbbbbbcbcbbccbccbcbccbb

--------------------------------------------------------------------------------
97 pt/round: HackerBois(P1) "Cutting The Gordian Knot"
-499 pt/round: G-5(P3) "Betray, then betray or collude"
bBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
bccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

--------------------------------------------------------------------------------
-250 pt/round: HackerBois(P1) "Cutting The Gordian Knot"
-250 pt/round: HONG KONG(P4) "STRAG1"
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbb
bbbbbbbbbbb

--------------------------------------------------------------------------------
-194 pt/round: HackerBois(P1) "Cutting The Gordian Knot"
-291 pt/round: GitHub2.0(P5) "Strategy 1"
bbbbbbBbBbBbBbBBbbBbbbbbbbbBBbbbbbbbBbbbbbbbBbBbbBbbbBbBbbbbbbbbbBbbbbbbBbbbbbbb
bbbbbbcbcbcbcbccbbcbbbbbbbbccbbbbbbbcbbbbbbbcbcbbcbbbcbcbbbbbbbbbcbbbbbbcbbbbbbb

bbBbbbbbbbBbbbbbbbbbBbbBbbbbbbbbbbbbbbbbbbBbbbbbbbbbBbbbbbbbbbbbBbBbbbbBbbbbbbbb
bbcbbbbbbbcbbbbbbbbbcbbcbbbbbbbbbbbbbbbbbbcbbbbbbbbbcbbbbbbbbbbbcbcbbbbcbbbbbbbb

--------------------------------------------------------------------------------
-250 pt/round: HackerBois(P1) "Cutting The Gordian Knot"
-250 pt/round: CoolKids(P6) "CopyCat"
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team kollude
--------------------------------------------------------------------------------
-341 pt/round: kollude(P2) "morse_code"
-122 pt/round: Bscts&Grvy(P0) "America The Beautiful"
Bcbbbbbbbbbbbbcbcbbccbccbcbccbbbbbbbbcbbbcbbcbcbcbbbbbcbbcbbcccccccbcccbbbcbcbbb
cBbbbbbbbbbbbbBbBbbBBbBBbBbBBbbbbbbbbBbbbBbbBbBbBbbbbbBbbBbbBBBBBBBbBBBbbbBbBbbb

bbbcbccbbccbcbbcbbcbbbcbbccbccbcccccbccbbbbcbcbbbbbbbbbbbbcb
bbbBbBBbbBBbBbbBbbBbbbBbbBBbBBbBBBBBbBBbbbbBbBbbbbbbbbbbbbBb

--------------------------------------------------------------------------------
-347 pt/round: kollude(P2) "morse_code"
-115 pt/round: HackerBois(P1) "Cutting The Gordian Knot"
bcbbbbbbbbbbbbcbcbbccbccbcbccbbbbbbbbcbbbcbbcbcbcbbbbbcbbcbbcccccccbcccbbbcbcbbb
bBbbbbbbbbbbbbBbBbbBBbBBbBbBBbbbbbbbbBbbbBbbBbBbBbbbbbBbbBbbBBBBBBBbBBBbbbBbBbbb

bbbcbccbbccbcbbcbbcbbbcbbccbccbcccccbccbbbbcbcbbbbbbbbbbbbcbcbbccbccbcbccbb
bbbBbBBbbBBbBbbBbbBbbbBbbBBbBBbBBBBBbBBbbbbBbBbbbbbbbbbbbbBbBbbBBbBBbBbBBbb

--------------------------------------------------------------------------------
60 pt/round: kollude(P2) "morse_code"
-312 pt/round: G-5(P3) "Betray, then betray or collude"
bCBBBBBBBBBBBBCBCBBCCBCCBCBCCBBBBBBBBCBBBCBBCBCBCBBBBBCBBCBBCCCCCCCBCCCBBBCBCBBB
bCccccccccccccCcCccCCcCCcCcCCccccccccCcccCccCcCcCcccccCccCccCCCCCCCcCCCcccCcCccc

BBBCBCCBBCCBCBBCBBCBBBCBBCCBCCBCCCCCBCCBBBBCBCBBBBBBBBBBBBCBCBBCCBCCBCBCCBBBBBBB
cccCcCCccCCcCccCccCcccCccCCcCCcCCCCCcCCccccCcCccccccccccccCcCccCCcCCcCcCCccccccc

BCBBBC
cCcccC

--------------------------------------------------------------------------------
-350 pt/round: kollude(P2) "morse_code"
-110 pt/round: HONG KONG(P4) "STRAG1"
bcbbbbbbbbbbbbcbcbbccbccbcbccbbbbbbbbcbbbcbbcbcbcbbbbbcbbcbbcccccccbcccbbbcbcbbb
bBbbbbbbbbbbbbBbBbbBBbBBbBbBBbbbbbbbbBbbbBbbBbBbBbbbbbBbbBbbBBBBBBBbBBBbbbBbBbbb

bbbcbccbbccbcbbcbbcbbbcbbccbccbcccccbccbbbbcb
bbbBbBBbbBBbBbbBbbBbbbBbbBBbBBbBBBBBbBBbbbbBb

--------------------------------------------------------------------------------
-342 pt/round: kollude(P2) "morse_code"
-123 pt/round: GitHub2.0(P5) "Strategy 1"
bcbbbbbbbbbbbbcbcbbccbccbcbccbbbbbbbbcbbbcbbcbcbcbbbbbcbbcbbcccccccbcccbbbcbcbbb
bBbbbbbbbbbbbbBbBbbBBbBBbBbBBbbbbbbbbBbbbBbbBbBbBbbbbbBbbBbbBBBBBBBbBBBbbbBbBbbb

bbbcbccbbccbcbbcbbcbbbcbbccbccbcccccbccbbbbcbcbbbbbbbbbbbbcbcbbccbccbcbccbbbbbbb
bbbBbBBbbBBbBbbBbbBbbbBbbBBbBBbBBBBBbBBbbbbBbBbbbbbbbbbbbbBbBbbBBbBBbBbBBbbbbbbb

bcbbbcbbcbcbcbbbbb
bBbbbBbbBbBbBbbbbb

--------------------------------------------------------------------------------
-250 pt/round: kollude(P2) "morse_code"
-250 pt/round: CoolKids(P6) "CopyCat"
bcBbbbbbbbbbbbcbcbbccbccbcbccbbbbbbbbcbbbcbbcbcbcbbbbbcbbcbbcccccccbcccbbbcbcbbb
bBc                                                                             

bbbcbccbbccbcbbcbbcbbbcbbccbccbcccccbc
                                      

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team G-5
--------------------------------------------------------------------------------
-496 pt/round: G-5(P3) "Betray, then betray or collude"
95 pt/round: Bscts&Grvy(P0) "America The Beautiful"
Bccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
cBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

--------------------------------------------------------------------------------
-499 pt/round: G-5(P3) "Betray, then betray or collude"
97 pt/round: HackerBois(P1) "Cutting The Gordian Knot"
bccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
bBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

--------------------------------------------------------------------------------
-312 pt/round: G-5(P3) "Betray, then betray or collude"
60 pt/round: kollude(P2) "morse_code"
bCccccccccccccCcCccCCcCCcCcCCccccccccCcccCccCcCcCcccccCccCccCCCCCCCcCCCcccCcCccc
bCBBBBBBBBBBBBCBCBBCCBCCBCBCCBBBBBBBBCBBBCBBCBCBCBBBBBCBBCBBCCCCCCCBCCCBBBCBCBBB

cccCcCCccCCcCccCccCcccCccCCcCCcCCCCCcCCccccCcCccccccccccccCcCccCCcCCcCcCCccccccc
BBBCBCCBBCCBCBBCBBCBBBCBBCCBCCBCCCCCBCCBBBBCBCBBBBBBBBBBBBCBCBBCCBCCBCBCCBBBBBBB

cCcccC
BCBBBC

--------------------------------------------------------------------------------
-499 pt/round: G-5(P3) "Betray, then betray or collude"
97 pt/round: HONG KONG(P4) "STRAG1"
bccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
bBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

cccccc
BBBBBB

--------------------------------------------------------------------------------
-497 pt/round: G-5(P3) "Betray, then betray or collude"
96 pt/round: GitHub2.0(P5) "Strategy 1"
Bccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
cBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

cccccccccccccccccccccccccccccccccccccc
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

--------------------------------------------------------------------------------
-250 pt/round: G-5(P3) "Betray, then betray or collude"
48 pt/round: CoolKids(P6) "CopyCat"
bcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCc
bBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCB

CcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcC
CBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBC

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team HONG KONG
--------------------------------------------------------------------------------
-249 pt/round: HONG KONG(P4) "STRAG1"
-252 pt/round: Bscts&Grvy(P0) "America The Beautiful"
Bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
cbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
-250 pt/round: HONG KONG(P4) "STRAG1"
-250 pt/round: HackerBois(P1) "Cutting The Gordian Knot"
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbb
bbbbbbbbbbb

--------------------------------------------------------------------------------
-110 pt/round: HONG KONG(P4) "STRAG1"
-350 pt/round: kollude(P2) "morse_code"
bBbbbbbbbbbbbbBbBbbBBbBBbBbBBbbbbbbbbBbbbBbbBbBbBbbbbbBbbBbbBBBBBBBbBBBbbbBbBbbb
bcbbbbbbbbbbbbcbcbbccbccbcbccbbbbbbbbcbbbcbbcbcbcbbbbbcbbcbbcccccccbcccbbbcbcbbb

bbbBbBBbbBBbBbbBbbBbbbBbbBBbBBbBBBBBbBBbbbbBb
bbbcbccbbccbcbbcbbcbbbcbbccbccbcccccbccbbbbcb

--------------------------------------------------------------------------------
97 pt/round: HONG KONG(P4) "STRAG1"
-499 pt/round: G-5(P3) "Betray, then betray or collude"
bBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
bccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

BBBBBB
cccccc

--------------------------------------------------------------------------------
-169 pt/round: HONG KONG(P4) "STRAG1"
-309 pt/round: GitHub2.0(P5) "Strategy 1"
BBbbBbbbbbbBbBbbbbbbbbbbBbBbbbbbbbbbbBBBbBbbbbbbbbbBbbbBbBbbbbbbbbbBbbbBBbbbbbbb
ccbbcbbbbbbcbcbbbbbbbbbbcbcbbbbbbbbbbcccbcbbbbbbbbbcbbbcbcbbbbbbbbbcbbbccbbbbbbb

BbbbbbBbbBBBbbbBbbBBbbBbBbbBbbBbbBbbbbbbbbbBbbbbbbbbbBBbbBbbbbbbBbbbbbbbbBbbBBbb
cbbbbbcbbcccbbbcbbccbbcbcbbcbbcbbcbbbbbbbbbcbbbbbbbbbccbbcbbbbbbcbbbbbbbbcbbccbb

bbb
bbb

--------------------------------------------------------------------------------
-250 pt/round: HONG KONG(P4) "STRAG1"
-250 pt/round: CoolKids(P6) "CopyCat"
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team GitHub2.0
--------------------------------------------------------------------------------
-285 pt/round: GitHub2.0(P5) "Strategy 1"
-200 pt/round: Bscts&Grvy(P0) "America The Beautiful"
Bbbbbbbbbbbbbbbbbbcbbbbbbcccbbbccbcbbbbbbbbbbbcbbbcbcbcbbbbcbbcbbbbbbbbbcbbbbbbb
cbbbbbbbbbbbbbbbbbBbbbbbbBBBbbbBBbBbbbbbbbbbbbBbbbBbBbBbbbbBbbBbbbbbbbbbBbbbbbbb

bbbbbbbbbbcbbbbccbbbbbbbbbbbbbbb
bbbbbbbbbbBbbbbBBbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
-291 pt/round: GitHub2.0(P5) "Strategy 1"
-194 pt/round: HackerBois(P1) "Cutting The Gordian Knot"
bbbbbbcbcbcbcbccbbcbbbbbbbbccbbbbbbbcbbbbbbbcbcbbcbbbcbcbbbbbbbbbcbbbbbbcbbbbbbb
bbbbbbBbBbBbBbBBbbBbbbbbbbbBBbbbbbbbBbbbbbbbBbBbbBbbbBbBbbbbbbbbbBbbbbbbBbbbbbbb

bbcbbbbbbbcbbbbbbbbbcbbcbbbbbbbbbbbbbbbbbbcbbbbbbbbbcbbbbbbbbbbbcbcbbbbcbbbbbbbb
bbBbbbbbbbBbbbbbbbbbBbbBbbbbbbbbbbbbbbbbbbBbbbbbbbbbBbbbbbbbbbbbBbBbbbbBbbbbbbbb

--------------------------------------------------------------------------------
-123 pt/round: GitHub2.0(P5) "Strategy 1"
-342 pt/round: kollude(P2) "morse_code"
bBbbbbbbbbbbbbBbBbbBBbBBbBbBBbbbbbbbbBbbbBbbBbBbBbbbbbBbbBbbBBBBBBBbBBBbbbBbBbbb
bcbbbbbbbbbbbbcbcbbccbccbcbccbbbbbbbbcbbbcbbcbcbcbbbbbcbbcbbcccccccbcccbbbcbcbbb

bbbBbBBbbBBbBbbBbbBbbbBbbBBbBBbBBBBBbBBbbbbBbBbbbbbbbbbbbbBbBbbBBbBBbBbBBbbbbbbb
bbbcbccbbccbcbbcbbcbbbcbbccbccbcccccbccbbbbcbcbbbbbbbbbbbbcbcbbccbccbcbccbbbbbbb

bBbbbBbbBbBbBbbbbb
bcbbbcbbcbcbcbbbbb

--------------------------------------------------------------------------------
96 pt/round: GitHub2.0(P5) "Strategy 1"
-497 pt/round: G-5(P3) "Betray, then betray or collude"
cBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
Bccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
cccccccccccccccccccccccccccccccccccccc

--------------------------------------------------------------------------------
-309 pt/round: GitHub2.0(P5) "Strategy 1"
-169 pt/round: HONG KONG(P4) "STRAG1"
ccbbcbbbbbbcbcbbbbbbbbbbcbcbbbbbbbbbbcccbcbbbbbbbbbcbbbcbcbbbbbbbbbcbbbccbbbbbbb
BBbbBbbbbbbBbBbbbbbbbbbbBbBbbbbbbbbbbBBBbBbbbbbbbbbBbbbBbBbbbbbbbbbBbbbBBbbbbbbb

cbbbbbcbbcccbbbcbbccbbcbcbbcbbcbbcbbbbbbbbbcbbbbbbbbbccbbcbbbbbbcbbbbbbbbcbbccbb
BbbbbbBbbBBBbbbBbbBBbbBbBbbBbbBbbBbbbbbbbbbBbbbbbbbbbBBbbBbbbbbbBbbbbbbbbBbbBBbb

bbb
bbb

--------------------------------------------------------------------------------
-250 pt/round: GitHub2.0(P5) "Strategy 1"
-250 pt/round: CoolKids(P6) "CopyCat"
bbbbcBbbbbbbbbbbbbbbbbbcbbbbcbbbccbbbbcccbbbcbcbbbbbbbbbcbbcbbbbcbbbbccbcbbbbbcb
bbbbBc                                                                          

bbbbccbcbbbbcccbbbcccbbbccbbbbbcbbbcbbbbbbbbbccbccbbbbbbcbbbccbbbbbbbcbbcbcbbbb
                                                                               

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team CoolKids
--------------------------------------------------------------------------------
-250 pt/round: CoolKids(P6) "CopyCat"
-250 pt/round: Bscts&Grvy(P0) "America The Beautiful"
Bc                                                                              
cBbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

                                                                                
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

                 
bbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
-250 pt/round: CoolKids(P6) "CopyCat"
-250 pt/round: HackerBois(P1) "Cutting The Gordian Knot"
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
-250 pt/round: CoolKids(P6) "CopyCat"
-250 pt/round: kollude(P2) "morse_code"
bBc                                                                             
bcBbbbbbbbbbbbcbcbbccbccbcbccbbbbbbbbcbbbcbbcbcbcbbbbbcbbcbbcccccccbcccbbbcbcbbb

                                      
bbbcbccbbccbcbbcbbcbbbcbbccbccbcccccbc

--------------------------------------------------------------------------------
48 pt/round: CoolKids(P6) "CopyCat"
-250 pt/round: G-5(P3) "Betray, then betray or collude"
bBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCB
bcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCc

CBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBC
CcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcCcC

--------------------------------------------------------------------------------
-250 pt/round: CoolKids(P6) "CopyCat"
-250 pt/round: HONG KONG(P4) "STRAG1"
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
-250 pt/round: CoolKids(P6) "CopyCat"
-250 pt/round: GitHub2.0(P5) "Strategy 1"
bbbbBc                                                                          
bbbbcBbbbbbbbbbbbbbbbbbcbbbbcbbbccbbbbcccbbbcbcbbbbbbbbbcbbcbbbbcbbbbccbcbbbbbcb

                                                                               
bbbbccbcbbbbcccbbbcccbbbccbbbbbcbbbcbbbbbbbbbccbccbbbbbbcbbbccbbbbbbbcbbcbcbbbb

--------------------------------------------------------------------------------
